diff --git a/api/handler.js b/api/handler.js
index 59fd529f8ca36f179d7602214d5a54298540ca53..5fc2f82d070fde38acac0bd69e5b1ba9f1a78f92 100644
--- a/api/handler.js
+++ b/api/handler.js
@@ -18,7 +18,7 @@ export default function handler(options, api) {
     const stringifyQueryObjects = options.config.stringifyQueryObjects === undefined ? true : options.config.stringifyQueryObjects;
     if (stringifyQueryObjects && 'query' in api)
         stringifyQuery(api);
-    const url = options.config.baseUrl || '' + options.path + ('query' in api ? '?' + new URLSearchParams(api.query).toString() : '');
+    const url = (options.config.baseUrl || '') + options.path + ('query' in api ? '?' + new URLSearchParams(api.query).toString() : '');
     const baseData = options.config.baseData || {};
     const isForm = Object.prototype.toString.call(api.body) === '[object FormData]';
     if (!('content-type' in api.headers))
@@ -54,7 +54,10 @@ export default function handler(options, api) {
     const requestInit = { ...baseData, ...api, headers: { ...(baseData['headers'] || {}), ...(api['headers'] || {}) } };
     if (api.body === undefined)
         delete requestInit['body'];
-    const response = fetch(url, requestInit);
+	// avoid making the "preflight http request", which will make it twice as fast
+	const collapsedRequestInit = api.method === 'GET' ? undefined : requestInit
+
+    const response = fetch(url, collapsedRequestInit);
     response.then(async (res) => {
         const json = (res.headers.get('content-type') || '').includes('application/json') && await res[options.config.format || 'json']();
         // TODO: Handle other responses than just JSON
diff --git a/api-types/api-updater.js b/api-types/api-updater.js
index 07a166114c41a789139058a6fbbe87689bb9c240..8533c1e333194494401b392bd99cad34dc6dc119 100644
--- a/api-types/api-updater.js
+++ b/api-types/api-updater.js
@@ -1,6 +1,6 @@
 import { pathToImportPath, toValidVariable } from '../utils/string.js';
 import fs from 'fs';
-import { resolve } from 'path';
+import { resolve, relative } from 'path';
 import { debugging } from '../internal.js';
 const cwd = process.cwd();
 /** Is run when file changes has been detected */
@@ -10,25 +10,41 @@ routesDirectory) {
     let apiTypes = {};
     let importStatements = '';
     debugging && console.time(`[DEBUG] Updated generated types at ${routesDirectory} ...`);
+	
+    const { tempOutput, outputDir = 'src' } = config;
+    const resolution = tempOutput ?
+        resolve(cwd, tempOutput) : resolve(cwd, '.svelte-kit', 'types', outputDir, 'sveltekit-zero-api.d.ts');
+
+	const parsePath = (path)=>{
+		const _relative = relative(resolution, path).replace('..','.');
+		const importName = pathToImportPath(_relative);
+		const alias = toValidVariable(importName);
+		return {importName, alias}
+	}
     function recursiveLoad(dir, directory) {
         const files = fs.readdirSync(dir);
         // ex. src/routes/(app)/api/somedir/index.ts
-        for (const fileName of files) {
+        for (let fileName of files) {
             const path = resolve(dir, fileName);
             const metadata = fs.statSync(path);
             if (metadata.isDirectory()) {
-                if (!directory[fileName])
+                if (!directory[fileName]){
+					if(fileName.match(/\[(.*?)\]/)){
+						// this should be a promise, it should resolve when dirText is parsed...
+						const { alias } = parsePath(path + '/+server.ts') // comply with pathToImportPath
+						fileName = fileName.replace(/\[(.*?)\]/, `[$1]${alias}`)
+					}
                     directory[fileName] = {};
+				}
                 recursiveLoad(path, directory[fileName]);
                 continue;
             }
             if (!/\+server.(ts|js)/gm.test(fileName))
                 continue;
-            const importName = pathToImportPath(path);
-            const name = toValidVariable(importName);
-            importStatements += `import * as ${name} from "${importName}";\n`;
+			const { alias, importName } = parsePath(path)
+            importStatements += `import * as ${alias} from "${importName}";\n`;
             const key = fileName.replace(/\.(ts|js)$/g, '');
-            directory[key] = `Z<typeof ${name}>`;
+            directory[key] = `Z<typeof ${alias}>`;
         }
     }
     recursiveLoad(routesDirectory, apiTypes);
@@ -53,11 +69,12 @@ routesDirectory) {
         .replaceAll(/(__server\>\",)|(__server\>\")/g, '__server> & {')
         // Transform slugs e.g. "[slug]": into functions slug$: (slug: S) =>
         // TODO: Allow ex. [slug].[second] to become slug$second$: (slug: S, second: S) =>
-        .replaceAll(/\"\[(.*?)\]\"\:/g, '$1$: ($1: S) =>')
+        .replaceAll(/\"\[(.*?)\](.*?)\"\:/g, (match, p1, p2) => {
+			// FIXME: check for other cases
+			const slug = p2 || 'SN';
+			return `${p1}$: (${p1}: Slug<${slug}.Slug>) =>`;
+		})
         .replaceAll(/=\w+(?=:|\$)/g, '');
-    const { tempOutput, outputDir = 'src' } = config;
-    const resolution = tempOutput ?
-        resolve(cwd, tempOutput) : resolve(cwd, '.svelte-kit', 'types', outputDir, 'sveltekit-zero-api.d.ts');
     const folder = resolve(resolution, '..');
     if (!fs.existsSync(folder))
         fs.mkdirSync(folder, { recursive: true });
@@ -78,5 +95,7 @@ const file = (dirText, importCode) => `/* eslint-disable */
 import type { Z } from 'sveltekit-zero-api/types/zeroapi'
 ${importCode}
 
-type S = string | number 
+type SN = string | number
+type Slug<S = SN> = S extends SN ? S : SN
+
 export type GeneratedAPI = ${dirText}`;